public static IQueryable<T> ApplyIncludes<T>(this DbSet<T> dbSet, KeyValuePair<Expression<Func<T, object>>, Expression<Func<object, object>>[]>[] includePairs) where T : class
{
    if (includePairs is null || includePairs.Length == 0)
        return dbSet;

    IIncludableQueryable<T, object>? entities = default;

    foreach (var includePair in includePairs)
    {
        if (entities is null)
            entities = dbSet.Include(includePair.Key);
        else
            entities = entities.Include(includePair.Key);

        foreach (var thenInclude in includePair.Value)
            entities = entities.ThenInclude(thenInclude);
    }

    return entities;
}

public static IQueryable<T> ApplyTracking<T>(this IQueryable<T> query, bool tracking) where T : class
{
    if (tracking)
        query = query.AsTracking();

    return query;
}

public static IQueryable<T> ApplyOrdering<T>(this IQueryable<T> query, Expression<Func<T, object>>? orderBy, bool orderByDescending) where T : class
{
    if (orderBy != null)
        query = orderByDescending ? query.OrderByDescending(orderBy) : query.OrderBy(orderBy);

    return query;
}

public static Task<T> ApplyQueryModeAsync<T>(this IQueryable<T> query, Expression<Func<T, bool>> predicate, QueryMode queryMode) where T : class
{
    var entity = queryMode switch
    {
        QueryMode.First => query.FirstAsync(predicate),
        QueryMode.FirstOrDefault => query.FirstOrDefaultAsync(predicate),
        QueryMode.Single => query.SingleAsync(predicate),
        QueryMode.SingleOrDefault => query.SingleOrDefaultAsync(predicate),
        _ => throw new ArgumentOutOfRangeException(nameof(queryMode), queryMode, null)
    };

    return entity;
}

public static async Task<List<T>> ApplyPaginationAsync<T>(this IQueryable<T> query, int pageNumber, int pageSize, int totalCount)
{
    var skip = (pageNumber - 1) * pageSize;
    var take = Math.Min(pageSize, totalCount - skip);

    if (skip > totalCount)
        return [];

    return await query.Skip(skip).Take(take).ToListAsync();
}
